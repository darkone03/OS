Slip 1

Q1

#include<stdio.h>
#include<stdlib.h>
int available[20],Need[20][20],MAX[20][20],alloction[20][20],n,m;
void accept_matrix(int arr[20][20])
{
int i,j;
for(i=0;i<n;i++)
{
for(j=0;j<m;j++)
{
scanf("%d",&arr[i][j]);
}
}
}
void accept_array(int arr[20],int no)
{
int i;
for(i=0;i<no;i++)
{
scanf("%d",&arr[i]);
}
}
void display_matrix(int arr[20][20])
{
int i,j;
for(i=0;i<n;i++)
{
for(j=0;j<m;j++)
{
printf("%d\t", arr[i][j]);
}
printf("\n");
}
}
void display_array(int arr[20],int no)
{
int i;
for(i=0;i<no;i++)
{
printf("%d", arr[i]);
}
}
void find_need()
{
int i,j;
for(i=0;i<n;i++)
{
for(j=0;j<m;j++)
{
Need[i][j]=MAX[i][j] - alloction[i][j];
}
}
}
void main()
{
printf("\nEnter the number of processes :\n");
scanf("%d",&n);
printf("\nEnter the number of Resources :\n");
scanf("%d",&m);
int ch;
while(ch!=6)
{
printf("\n1.accept\n2.display\n3.Need\n4exit\n");
printf("Enter Your choice : \n");
scanf("%d", &ch);
switch(ch)
{
case 1:
printf("\nenter the number of available :\n");
accept_array(available,m);
printf("\nenter the number of allocation :\n");
accept_matrix(alloction);
printf("\nenter the number of MAx :\n");
accept_matrix(MAX);
break;
case 2:
printf("\nthe number of available :\n");
display_array(available,m);
printf("\nthe number of allocation :\n");
display_matrix(alloction);
printf("\nthe number of MAX :\n");
display_matrix(MAX);
break;
case 3:
find_need();
printf("\nNeed matrix:\n");
display_matrix(Need);
break;
case 4:
printf("exit\n");
break;
default:
printf("invalid choice\n");
}
}
}


--------------------------------------------------------------------------

Q22.Write a simulation program for disk scheduling using FCFS algorithm. Accept total number 
of disk blocks, disk request string, and current head position from the user. Display the list of 
request in the order in which it is served. Also display the total number of head moments.55,
58, 39, 18, 90, 160, 150, 38, 184 Start Head Position: 50



#include<stdio.h>
#include<stdlib.h>
int front,rear;
void init()
{
front = rear = -1;
}
void display(int *Q)
{
int i;
for(i=front;i<=rear;i++)
printf("\t%d",Q[i]);
}
void enqueue(int *Q,int n,int var)
{
if(rear==n)
printf("\nQueue is full");
else
{
if(front==-1)
front++;
rear++;
Q[rear]=var;
}
}
int FCFS(int *Q,int n)
{
int j,seek=0,diff;
for(j=0;j<n;j++)
{
diff = abs(Q[j+1]-Q[j]);
seek+=diff;
printf("Disk head moves from %d to %d with seek %d\n",Q[j],Q[j+1],diff);
}
return seek;
}
int main()
{
int queue[20],n,var,head,i,j,k,seek,max;
float avg;
init();
printf("\nFront=%d\nRear=%d",front,rear);
printf("\nEnter the max range of disk\n");
scanf("%d",&max);
printf("Enter the size of queue request\n");
scanf("%d",&n);
printf("Enter the initial head position\n");
scanf("%d",&head);
printf("Enter the queue of disk position to be read\n");
enqueue(queue,n,head);
for(i=1;i<=n;i++)
{
scanf("%d",&var);
if(var<0||var>max)
printf("\n Error ..!given position is invalid\n");
else
{
enqueue(queue,n,var);
}
}
printf("\n Given queueis\n");
display(queue);
printf("\n\nFCFS Algorithm\n");
seek = FCFS(queue,n);
printf("Total seek time is %d\n",seek);
avg=seek/(float)n;
printf("Average seek time is %f\n",avg);
return 0;
}



