Slip 2

Q1
1Write a program to simulate Linked file allocation method. Assume disk with n number of blocks. 
Give value of n as input. Randomly mark some block as allocated and accordingly maintain the list of 
free blocks Write menu driver program with menu options as mentioned below and implement each 
option.
• Show Bit Vector
• Create New File
• Show Directory
• Exit


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 200
typedef struct dir
{
char fname[20];
int start;
struct dir *next;
}NODE;
NODE *first,*last;
int n,s[10],l[10],k=0,fb,bit[MAX];
void Generate_BitVector()
{
int i,num;
for(i=0;i<n;i++)
{
num=rand();
bit[i]=num%2;
}
}
void show_bitVector()
{
int i;
printf("\n Given bit Array is\n");
for(i=0;i<=n;i++)
{
printf("%d",bit[i]);
}
printf("\n");
}
void showDirectory()
{
NODE *p;
int j,i;
printf("\n Filename\t Start\t End\t Chain\n");
p=first;
j=0;
while(p!=NULL)
{
printf("%s\t%d\t%d\t",p->fname,s[j],l[j]);
i=p->start;
while(i!=-1)
{
printf("%d->",i);
i=bit[i];
}
printf("NULL\n");
p=p->next;
j++;
}
}
void create()
{
NODE *p;
char fname[20];
int i,j,nob;
printf("Enter File name:");
scanf("%s",fname);
printf("Enter number of blocks");
scanf("%d",&nob);
if(nob>fb)
{
printf("Failed to create %s file",fname);
return;
}
for(i=0;i<n;i++)
{
if(bit[i]==0)
break;
}
p=(NODE*)malloc(sizeof(NODE));
strcpy(p->fname,fname);
p->start=i;
p->next=NULL;
if(first==NULL)
first=p;
else
last->next=p;
last=p;
fb-=nob;
j=i+1;
nob--;
while(nob>0)
{
if(bit[j]==0)
{
bit[i]=j;
i=j;
nob--;
}
j++;
}
bit[i]=-1;
l[k]=i;
k++;
printf("File %s created successfully!\n",fname);
}
int main()
{
int ch;
printf("Enter total number of disk blocks:");
scanf("%d",&n);
fb=n;
Generate_BitVector();
while(1)
{
printf("1.Show Bit Vector\n");
printf("2.Create new File\n");
printf("3.Show directory\n");
printf("4.exit\n");
printf("Enter your choice(1-5):");
scanf("%d",&ch);
switch(ch)
{
case 1:
show_bitVector();
break;
case 2:
create();
break;
case 3:
showDirectory();
break;
case 4:
exit(0);
}
}
return 0;
}

-------------------------------------------------------------------

Q2 Write an MPI program to calculate sum of randomly generated 1000 numbers (stored in array) on 
a cluster


#include<stdio.h>
#include<stdlib.h>
#include<mpi.h>
#define ARRAY_SIZE 1000
int main(int argc,char *argv[])
{
int rank,size,partial_sum=0,total_sum=0,number[ARRAY_SIZE];
MPI_Init(&argc,&argv);
MPI_Comm_rank(MPI_COMM_WORLD,&rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);
srand(rank);
for(int i=0;i<ARRAY_SIZE;i++)
{
number[i]=rand()%100;
}
for(int i=0;i<ARRAY_SIZE;i++)
{
partial_sum += number[i];
}
MPI_Reduce(&partial_sum , &total_sum,1,MPI_INT,MPI_SUM,0,MPI_COMM_WORLD);
if(rank == 0)
{
printf("Total sum : %d\n",total_sum);
}
MPI_Finalize();
return 0;
}



